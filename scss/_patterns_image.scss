/*
  @classreference
  image-container:
    Image container:
      .p-image-container:
        Main element of the image component.
      "&.is-cover":
        Cover variant, to be used to set the `.p-image-container__image` within to cover the container.
      "&.is-highlighted":
        Highlighted variant, to be used to highlight contents.
      .p-image-container--16-9:
        Wraps contents in a container with an aspect ratio of 16:9.
      .p-image-container--3-2:
        Wraps contents in a container with an aspect ratio of 3:2.
      .p-image-container--2-3:
        Wraps contents in a container with an aspect ratio of 2:3.
      .p-image-container--cinematic:
        Wraps contents in a container with an aspect ratio of 2.4:1.
      .p-image-container--square:
        Wraps contents in a container with an aspect ratio of 1:1.
      .p-image-container--(16-9|3-2|2-3|cinematic|square)-on-(small|medium|large):
        Wraps contents in a container with the specified aspect ratio on the specified breakpoint.
    Image:
      .p-image-container__image:
        Image element within an image container.
*/

@import 'settings';

$aspect-ratios: (
  '16-9': calc(16 / 9),
  '3-2': calc(3 / 2),
  '2-3': calc(2 / 3),
  'cinematic': calc(2.4 / 1),
  'square': 1,
);

$breakpoints: (
  small: (
    min: null,
    max: $threshold-4-6-col,
  ),
  medium: (
    min: $threshold-4-6-col,
    max: $threshold-6-12-col,
  ),
  large: (
    min: $threshold-6-12-col,
    max: null,
  ),
);

@mixin aspect-ratio-classes {
  @each $aspect-ratio, $aspect-ratio-value in $aspect-ratios {
    .p-image-container--#{$aspect-ratio} {
      aspect-ratio: $aspect-ratio-value;
    }
  }

  @each $breakpoint_name, $breakpoint_bounds in $breakpoints {
    $min-width: map-get($breakpoint_bounds, min);
    $max-width: map-get($breakpoint_bounds, max);

    @if $min-width and $max-width {
      @media ($min-width <= width < $max-width) {
        @each $aspect-ratio, $aspect-ratio-value in $aspect-ratios {
          .p-image-container--#{$aspect-ratio}-on-#{$breakpoint_name} {
            aspect-ratio: $aspect-ratio-value;
          }
        }
      }
    } @else if $min-width {
      @media (min-width: $min-width) {
        @each $aspect-ratio, $aspect-ratio-value in $aspect-ratios {
          .p-image-container--#{$aspect-ratio}-on-#{$breakpoint_name} {
            aspect-ratio: $aspect-ratio-value;
          }
        }
      }
    } @else if $max-width {
      @media (max-width: $max-width) {
        @each $aspect-ratio, $aspect-ratio-value in $aspect-ratios {
          .p-image-container--#{$aspect-ratio}-on-#{$breakpoint_name} {
            aspect-ratio: $aspect-ratio-value;
          }
        }
      }
    }
  }
}

@mixin vf-p-image {
  .p-image-container,
  [class^='p-image-container--'] {
    align-items: center;
    display: flex;
    justify-content: center;
    text-align: center;

    &.is-highlighted {
      background: $colors--theme--background-alt;
    }

    .p-image-container__image {
      // max height prevents the image from stretching the container
      // when the aspect ratio is set, and object-fit ensures the aspect ratio
      // of the image content is maintained
      max-height: 100%;
      object-fit: contain;
    }

    &.is-cover {
      .p-image-container__image {
        height: 100%;
        object-fit: cover;
        width: 100%;
      }
    }
  }

  @include aspect-ratio-classes;

  // Deprecated; will be removed in v5
  .p-image--bordered {
    border: {
      color: $color-mid-light;
      style: solid;
      width: 1px;
    }
  }

  // Deprecated; will be removed in v5
  .p-image--shadowed {
    box-shadow: 0 1px 5px 1px transparentize($color-mid-light, 0.8);
  }
}
