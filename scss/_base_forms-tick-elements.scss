// tick element variables
$box-size: 1rem;

// Offsets to align tick elements to the baseline of headings.
$box-offsets-top: (
  h1-small-screens: 5,
  h1: 6,
  h2-small-screens: 4,
  h2: 5,
  h3-small-screens: 4,
  h3: 4,
  h4-small-screens: 3,
  h4: 3,
  default-text: 3.333,
  unpadded-text: 2.125,
  muted-heading: 2.333,
  muted-inline-heading: 2
) !default;

@mixin vf-b-tick-elements {
  // Default form checkbox and radio styles
  %vf-tick-elements {
    position: absolute;
    opacity: 0;

    label & {
      // some basic styling for checkboxes inside labels
      float: left;
      margin: $spv-inner--x-small $sph-inner 0 0;
      opacity: 1;
      position: static;
    }

    & + label {
      padding-left: $sph-inner + $box-size;
      position: relative;

      &::before,
      &::after {
        $properties: #{background-color, border-color};
        @include vf-animation($properties);
        position: absolute;
      }

      // container
      &::before {
        border: 1px solid $color-mid;
        content: '';
        height: $box-size;
        left: 0;
        outline-offset: 1px;
        width: $box-size;
      }

      // Align with different text styles
      @media (max-width: $breakpoint-heading-threshold) {
        &:not(.is-h1)::before,
        &:not(.is-h2)::before,
        &:not(.is-h3)::before,
        &:not(.is-h4)::before,
        &:not(.is-muted-heading)::before,
        &:not(.is-inline-label)::before {
          top: #{$sp-unit * map-get($box-offsets-top, default-text) - $box-size};
        }

        &.is-h1::before {
          top: #{$sp-unit * map-get($box-offsets-top, h1-small-screens) - $box-size};
        }

        &.is-h2::before {
          top: #{$sp-unit * map-get($box-offsets-top, h2-small-screens) - $box-size};
        }

        &.is-h3::before {
          top: #{$sp-unit * map-get($box-offsets-top, h3-small-screens) - $box-size};
        }

        &.is-h4::before {
          top: #{$sp-unit * map-get($box-offsets-top, h4-small-screens) - $box-size};
        }

        &.is-inline-label::before {
          top: #{$sp-unit * map-get($box-offsets-top, unpadded-text) - $box-size};
        }

        &.is-muted-heading::before {
          top: #{$sp-unit * map-get($box-offsets-top, muted-heading) - $box-size};
        }

        &.is-muted-inline-heading::before {
          top: #{$sp-unit * map-get($box-offsets-top, muted-inline-heading) - $box-size};
        }
      }

      @media (min-width: $breakpoint-heading-threshold) {
        &:not(.is-h1)::before,
        &:not(.is-h2)::before,
        &:not(.is-h3)::before,
        &:not(.is-h4)::before,
        &:not(.is-muted-heading)::before,
        &:not(.is-inline-label)::before {
          top: #{$sp-unit * map-get($box-offsets-top, default-text) - $box-size};
        }

        &.is-h1::before {
          top: #{$sp-unit * map-get($box-offsets-top, h1) - $box-size};
        }

        &.is-h2::before {
          top: #{$sp-unit * map-get($box-offsets-top, h2) - $box-size};
        }

        &.is-h3::before {
          top: #{$sp-unit * map-get($box-offsets-top, h3) - $box-size};
        }

        &.is-h4::before {
          top: #{$sp-unit * map-get($box-offsets-top, h4) - $box-size};
        }

        &.is-inline-label::before {
          top: #{$sp-unit * map-get($box-offsets-top, unpadded-text) - $box-size};
        }

        &.is-muted-heading::before {
          top: #{$sp-unit * map-get($box-offsets-top, muted-heading) - $box-size};
        }

        &.is-muted-inline-heading::before {
          top: #{$sp-unit * map-get($box-offsets-top, muted-inline-heading) - $box-size};
        }
      }

      // tick/circle
      &::after {
        content: '';
        opacity: 0;
      }

      &.is-h1 {
        @extend %vf-heading-1;
      }

      &.is-h2 {
        @extend %vf-heading-2;
      }

      &.is-h3 {
        @extend %vf-heading-3;
      }

      &.is-h4 {
        @extend %vf-heading-4;
      }

      &.is-inline-label {
        display: inline;
        padding-top: 0;
      }

      &.is-muted-heading {
        @extend %muted-heading;
      }

      &.is-muted-inline-heading {
        @extend %muted-heading;
        display: inline;
        margin-bottom: 0;
        padding-top: 0;
      }
    }

    &:checked + label::after {
      opacity: 1;
    }

    &:focus + label::before {
      outline: 2px solid $color-focus;
    }

    &[disabled],
    &[disabled='disabled'] {
      + label {
        @extend %vf-disabled-element;
      }
    }
  }

  [type='checkbox'] {
    @extend %vf-tick-elements;

    & + label {
      // container
      &::before {
        border-radius: $border-radius;
      }

      //tick
      &::after {
        $tick-height: 0.375rem;
        border-bottom: 2px solid;
        border-left: 2px solid;
        color: $color-x-light;
        height: $tick-height;
        left: $tick-height * 0.5;
        transform: rotate(-45deg);
        width: 0.625rem;
      }

      $tick-offset-top: 0.1875rem;

      // Align with different text styles
      @media (max-width: $breakpoint-heading-threshold) {
        &:not(.is-h1)::after,
        &:not(.is-h2)::after,
        &:not(.is-h3)::after,
        &:not(.is-h4)::after,
        &:not(.is-muted-heading)::after,
        &:not(.is-inline-label)::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, default-text) - $box-size};
        }

        &.is-h1::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, h1-small-screens) - $box-size};
        }

        &.is-h2::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, h2-small-screens) - $box-size};
        }

        &.is-h3::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, h3-small-screens) - $box-size};
        }

        &.is-h4::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, h4-small-screens) - $box-size};
        }

        &.is-inline-label::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, unpadded-text) - $box-size};
        }

        &.is-muted-heading::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, muted-heading) - $box-size};
        }

        &.is-muted-inline-heading::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, muted-inline-heading) - $box-size};
        }
      }

      @media (min-width: $breakpoint-heading-threshold) {
        &:not(.is-h1)::after,
        &:not(.is-h2)::after,
        &:not(.is-h3)::after,
        &:not(.is-h4)::after,
        &:not(.is-muted-heading)::after,
        &:not(.is-inline-label)::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, default-text) - $box-size};
        }

        &.is-h1::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, h1) - $box-size};
        }

        &.is-h2::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, h2) - $box-size};
        }

        &.is-h3::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, h3) - $box-size};
        }

        &.is-h4::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, h4) - $box-size};
        }

        &.is-inline-label::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, unpadded-text) - $box-size};
        }

        &.is-muted-heading::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, muted-heading) - $box-size};
        }

        &.is-muted-inline-heading::after {
          top: #{$tick-offset-top + $sp-unit * map-get($box-offsets-top, muted-inline-heading) - $box-size};
        }
      }
    }

    &:checked {
      @extend %checked;
    }
  }

  [type='radio'] {
    @extend %vf-tick-elements;
    $inner-circle-diameter: 0.375rem;
    $circle-offset-top: 0.5 * ($box-size - $inner-circle-diameter);

    & + label {
      &::before,
      &::after {
        border-radius: 50%;
      }

      &::after {
        background-color: $color-x-light;
        border-radius: 50%;
        height: $inner-circle-diameter;
        left: #{($box-size - $inner-circle-diameter) * 0.5};
        // top: #{$box-offset-top + 0.5 * ($box-size - $inner-circle-diameter)};
        width: $inner-circle-diameter;
      }

      // Align with different text styles
      @media (max-width: $breakpoint-heading-threshold) {
        &:not(.is-h1)::after,
        &:not(.is-h2)::after,
        &:not(.is-h3)::after,
        &:not(.is-h4)::after,
        &:not(.is-muted-heading)::after,
        &:not(.is-inline-label)::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, default-text) - $box-size};
        }

        &.is-h1::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, h1-small-screens) - $box-size};
        }

        &.is-h2::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, h2-small-screens) - $box-size};
        }

        &.is-h3::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, h3-small-screens) - $box-size};
        }

        &.is-h4::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, h4-small-screens) - $box-size};
        }

        &.is-inline-label::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, unpadded-text) - $box-size};
        }

        &.is-muted-heading::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, muted-heading) - $box-size};
        }

        &.is-muted-inline-heading::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, muted-inline-heading) - $box-size};
        }
      }

      @media (min-width: $breakpoint-heading-threshold) {
        &:not(.is-h1)::after,
        &:not(.is-h2)::after,
        &:not(.is-h3)::after,
        &:not(.is-h4)::after,
        &:not(.is-muted-heading)::after,
        &:not(.is-inline-label)::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, default-text) - $box-size};
        }

        &.is-h1::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, h1) - $box-size};
        }

        &.is-h2::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, h2) - $box-size};
        }

        &.is-h3::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, h3) - $box-size};
        }

        &.is-h4::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, h4) - $box-size};
        }

        &.is-inline-label::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, unpadded-text) - $box-size};
        }

        &.is-muted-heading::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, muted-heading) - $box-size};
        }

        &.is-muted-inline-heading::after {
          top: #{$circle-offset-top + $sp-unit * map-get($box-offsets-top, muted-inline-heading) - $box-size};
        }
      }
    }

    &:checked {
      @extend %checked;
    }
  }

  %checked {
    & + label::before {
      background-color: $color-information;
      border-color: $color-information;
    }
  }
}
