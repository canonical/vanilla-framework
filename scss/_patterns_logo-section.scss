@mixin vf-p-set-logo-section-item-width($breakpoint: small) {
  // This mixin calculates the width of an individual logo.

  $grid-column-count: $grid-columns-small;
  $grid-column-prefix: $grid-small-col-prefix;
  $gutter: map-get($grid-gutter-widths, small);
  // medium and small use the same breakpoint, but one uses a max-width, the other a min-width;
  // so, we need to specify which one to use
  $media-query-keyword: max-width;
  $media-query-width: $threshold-4-6-col;
  // how many grid columns should a logo span
  $logo-column-span: 1;

  @if $breakpoint == medium {
    $grid-column-count: $grid-columns-medium;
    $grid-column-prefix: $grid-medium-col-prefix;
    $gutter: map-get($grid-gutter-widths, medium);
    $media-query-keyword: min-width;
    $media-query-width: $threshold-4-6-col;
    $logo-column-span: 1;
  } @else if $breakpoint == large {
    $grid-column-count: $grid-columns;
    $grid-column-prefix: $grid-large-col-prefix;
    $gutter: map-get($grid-gutter-widths, large);
    $media-query-keyword: min-width;
    $media-query-width: $threshold-6-12-col;
    $logo-column-span: 2;
  }

  @media ($media-query-keyword: #{$media-query-width}) {
    // First set the width assuming the parent spans the entire grid. This is the case in 4 scenarios:
    // 1. The logo section is nested inside a container that spans the entire grid, (depending on breakpoint that can be a .col-4, .col-6, or .col-12 class), which itself sits inside a .row
    // 2. The logo section is nested inside a .u-fixed-width container
    // 3. The logo section does not have a parent that sets a fixed width grid. This is not a recommended use case, but we ensure things still work

    // The logic of these calculations is explained further down, in the @for loop
    $gutters-total-width: $grid-column-count * $gutter;
    $percentage-width-of-one-col: 100% / $grid-column-count;
    $percentage-contribution: $logo-column-span * $percentage-width-of-one-col;
    $gutter-width-inside-logo: $gutter * ($logo-column-span - 1);
    $rem-contribution: $logo-column-span * ($gutters-total-width / $grid-column-count) - $gutter-width-inside-logo;

    @include vf-p-apply-logo-section-item-width($percentage-contribution, $rem-contribution);

    // Looping in reverse to ensure nested column rules end up further down in the generated css file, thus having higher specificity.
    // E.g. if a col-4 is nested inside col-8, the col-8 rule should be written above the col-4 rule in the css file, to ensure the col-4 styles take precedence
    // We start at one less than the column count, as this case has been handled above
    @for $column-count from $grid-column-count - 1 through 1 {
      // The number of gutters is equal to the number of columns. If we switch to usnig flex gap instead of margins, this should be updated to number of columns - 1.
      // $gutters-total-width calculates the total width of all gutters
      $gutters-total-width: $column-count * $gutter;
      @if $column-count == 1 {
        // if the available number of columns of the parent container is less than the desired number of columns the logo should span, we clamp that desired number ($logo-column-span) to what's available:
        $logo-column-span: min($logo-column-span, $column-count);
      }

      // The logos are sized so that, depending on breakpoint, they span either one, or two columns of the grid.
      // When spanning more than one column, we need to account for the gutters between the columns.

      // calc() doesn't allow dividing a mixture of different units, so the calculation
      // (100% - $gutters-total-width) / $column-count needs to be broken down into two separate divisions:
      // 100% / $column-count - $gutters-total-width / $column-count
      // Thus the calculation is split into 2 parts, which are then used in the final calc() function:

      // calculate the width of a single column by dividing the entire width by the number of columns it represents:
      $percentage-width-of-one-col: 100% / $column-count;

      // multiply the width of one column by the number of columns the logo needs to span
      $percentage-contribution: $logo-column-span * $percentage-width-of-one-col;

      // calculate the number of gutters the logo spans
      $gutter-width-inside-logo: $gutter * ($logo-column-span - 1);

      // add the width of gutters spanned by the logo, subtract the $gutters-total-width / $column-count;
      // the signs here are reversed because the variable is subtracted. This avoids having + and - in the final css, e.g.: "+ -.75rem"
      $rem-contribution: $logo-column-span * ($gutters-total-width / $column-count) - $gutter-width-inside-logo;

      .#{$grid-column-prefix}#{$column-count} & {
        @include vf-p-apply-logo-section-item-width($percentage-contribution, $rem-contribution);
      }
    }
  }
}

@mixin vf-p-apply-logo-section-item-width($percentage-contribution, $rem-contribution) {
  @if $rem-contribution == 0 {
    width: $percentage-contribution;
  } @else {
    width: calc(#{$percentage-contribution} - #{$rem-contribution});
  }
}

@mixin vf-p-logo-section {
  // The logo section pattern needs to align logos to the grid when they are an even number, and center them (while maintaining the same logo width) when the number of logos on a line is odd.
  // This means we can't use css grid for this, instead we need to replicate its behavior for even numbers of logos, and center the odd ones.
  .p-logo-section__title {
    @extend %x-small-text;

    font-weight: $font-weight-bold;
    text-transform: uppercase;
  }

  $margin-small: map-get($grid-gutter-widths, small);
  $margin-medium: map-get($grid-gutter-widths, medium);
  $margin-large: map-get($grid-gutter-widths, large);

  .p-logo-section__items {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    margin-bottom: $spv-outer--scaleable;
    // negates the margin of logos that sit in the first column
    margin-left: -#{$margin-small};
    width: calc(100% + #{$margin-small});

    @media (min-width: $threshold-4-6-col) {
      margin-left: -$margin-medium;
      width: calc(100% + #{$margin-medium});
    }

    @media (min-width: $threshold-6-12-col) {
      margin-left: -$margin-large;
      width: calc(100% + #{$margin-large});
    }
  }

  .p-logo-section__item {
    align-items: center;
    display: flex;
    flex: 0 1 auto;
    margin-left: $margin-small;

    @media (min-width: $threshold-4-6-col) {
      margin-left: $margin-medium;
    }

    @media (min-width: $threshold-6-12-col) {
      margin-left: $margin-large;
    }

    @include vf-p-set-logo-section-item-width($breakpoint: small);
    @include vf-p-set-logo-section-item-width($breakpoint: medium);
    @include vf-p-set-logo-section-item-width($breakpoint: large);
  }

  .p-logo-section__logo {
    height: auto;
    width: 100%;
  }
}
