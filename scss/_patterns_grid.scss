@import 'settings';

@mixin vf-p-grid-modifications {
  .row {
    width: 100%;
  }
}

@mixin vf-p-grid {
  %span-full-grid-on-mobile {
    @media (max-width: $threshold-4-6-col) {
      grid-column: 1 / span $grid-columns-small;
    }
  }

  %span-full-grid-on-tablet {
    @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
      grid-column: 1 / span $grid-columns-medium;
    }
  }

  %span-full-grid-on-desktop {
    @media (min-width: $threshold-6-12-col) {
      grid-column: 1 / span $grid-columns;
    }
  }

  .grid-demo [class*='#{$grid-column-prefix}'] {
    background: transparentize($color-negative, 0.9);
    margin-bottom: $spv-outer--small;
  }

  %display-block {
    // make columns explicitly display:block; the use of a placeholder is to ensure the rule appears only once in the compiled css
    display: block;
  }

  .row {
    @extend %vf-row;
  }

  // mobile grid
  @media (max-width: $threshold-4-6-col) {
    @for $i from $grid-columns-small through 1 {
      .#{$grid-small-col-prefix}#{$i} {
        grid-column-end: span #{$i};

        //nesting
        @if $i > 1 {
          & .row {
            grid-template-columns: repeat($i, minmax(0, 1fr));
          }
        }
      }
    }
  }

  // tablet grid
  @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
    @for $i from $grid-columns-medium through 1 {
      .#{$grid-medium-col-prefix}#{$i} {
        grid-column-end: span #{$i};

        //nesting
        @if $i > 1 {
          & .row {
            grid-template-columns: repeat($i, minmax(0, 1fr));
          }
        }
      }
    }
  }

  // desktop grid
  @media (min-width: $threshold-6-12-col) {
    @for $i from $grid-columns through 1 {
      // set col-* to span respective number of columns on desktop
      .#{$grid-large-col-prefix}#{$i} {
        grid-column-end: span #{$i};

        //nesting
        @if $i > 1 {
          & .row {
            grid-template-columns: repeat($i, minmax(0, 1fr));
          }
        }
      }
    }
  }

  // span full grid on other breakpoints; (to match block level element behaviour)
  @for $i from 1 through $grid-columns-small {
    .#{$grid-small-col-prefix}#{$i} {
      @extend %span-full-grid-on-tablet;
      @extend %span-full-grid-on-desktop;
      @extend %display-block;
    }
  }

  @for $i from 1 through $grid-columns-medium {
    .#{$grid-medium-col-prefix}#{$i} {
      @extend %span-full-grid-on-mobile;
      @extend %span-full-grid-on-desktop;
      @extend %display-block;
    }
  }

  @for $i from 1 through $grid-columns {
    .#{$grid-large-col-prefix}#{$i} {
      @extend %span-full-grid-on-mobile;
      @extend %span-full-grid-on-tablet;
      @extend %display-block;
    }
  }

  // column reordering
  $offsets: (
    (small, 0, $threshold-4-6-col, $grid-columns-small - 1),
    (medium, $threshold-4-6-col, $threshold-6-12-col, $grid-columns-medium - 1),
    (large, $threshold-6-12-col, -1, $grid-columns - 1)
  );

  @each $label, $breakpoint-min, $breakpoint-max, $col-count in $offsets {
    $query: null;
    @if $breakpoint-min == 0 {
      $query: '(max-width: #{$breakpoint-max})';
    } @else if $breakpoint-max == -1 {
      $query: '(min-width: #{$breakpoint-min})';
    } @else {
      $query: '(min-width: #{$breakpoint-min}) and (max-width: #{$breakpoint-max})';
    }

    @media #{$query} {
      @for $i from 1 through $col-count {
        .row [class*='#{$grid-column-prefix}'].#{$grid-column-prefix}start-#{$label}-#{$i} {
          grid-column-start: #{$i};
        }

        .#{$grid-column-prefix}order-#{$label}-#{$i} {
          order: #{$i};
        }
      }
    }
  }
}
