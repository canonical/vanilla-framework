@mixin vf-b-row-reset {
  margin-left: 0;
  margin-right: 0;
  padding-left: 0;
  padding-right: 0;
}

// Apply grid properties for a given breakpoint
@mixin vf-b-grid-template-impl($breakpoint, $columns) {
  grid-gap: 0 map-get($grid-gutter-widths, $breakpoint);
  grid-template-columns: repeat($columns, minmax(0, 1fr));
  // Expose the number of columns available for child elements as a CSS var, so that columns can span full grid width without increasing selector specificity\
  --vf-grid-columns: #{$columns};

  & > * {
    grid-column-end: span $columns;
  }
}

// Apply grid properties for a given breakpoint. If a min_width is provided, wrap the properties in a media query
@mixin vf-b-grid-template($breakpoint, $columns, $min_width: None) {
  @supports (display: grid) {
    @if $min-width == None {
      @include vf-b-grid-template-impl($breakpoint, $columns);
    } @else {
      @media (min-width: $min_width) {
        @include vf-b-grid-template-impl($breakpoint, $columns);
      }
    }
  }
}

@mixin vf-b-grid-definitions {
  %display-block {
    // make columns explicitly display:block; the use of a placeholder is to ensure the rule appears only once in the compiled css
    display: block;
  }

  %fixed-width-container--common-properties {
    @extend %vf-grid-container-padding;

    margin-left: auto;
    margin-right: auto;
    width: 100%;
  }

  %fixed-width-container {
    @extend %fixed-width-container--common-properties;

    max-width: $grid-max-width;

    & & {
      @include vf-b-row-reset;
    }
  }

  %vf-row-small {
    @include vf-b-grid-template(small, $grid-columns-small);
  }

  %vf-row-medium-4 {
    @include vf-b-grid-template(default, $grid-columns-medium-4, $threshold-4-small-4-med-col);
  }

  %vf-row-medium-6 {
    @include vf-b-grid-template(default, $grid-columns-medium, $threshold-4-6-col);
  }

  %vf-row-large {
    @include vf-b-grid-template(default, $grid-columns, $threshold-6-12-col);
  }

  %vf-row-base {
    @extend %fixed-width-container;

    @supports (display: grid) {
      display: grid;
      grid-template-rows: auto;
      margin-left: auto;
      margin-right: auto;
      max-width: $grid-max-width;

      [class*='#{$grid-column-prefix}'] {
        grid-column-start: auto;
      }
    }
  }

  %vf-row {
    @extend %vf-row-base;
    @extend %vf-row-small;
    @extend %vf-row-medium-6;
    @extend %vf-row-large;
  }

  %vf-row-medium-4 {
    @extend %vf-row-base;
    @extend %vf-row-small;
    @extend %vf-row-medium-4;
    @extend %vf-row-large;
  }

  %vf-grid-container-padding {
    // set static outside padding per breakpoint
    padding-left: map-get($grid-margin-widths, small);
    padding-right: map-get($grid-margin-widths, small);

    @media (min-width: $threshold-4-6-col) {
      padding-left: map-get($grid-margin-widths, default);
      padding-right: map-get($grid-margin-widths, default);
    }

    @media (min-width: $threshold-6-12-col) {
      padding-left: map-get($grid-margin-widths, default);
      padding-right: map-get($grid-margin-widths, default);
    }
  }
}
