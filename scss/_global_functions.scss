// Functions used across multiple patterns or utils

// This is to get the variable inserted in an inline svg, we have to strip the #
// and replace with %23
@function vf-url-friendly-color($color) {
  @if type-of($color) != 'color' {
    @warn '#{$color} is not a color.';
    @return $color;
  } @else {
    @return '%23' + str-slice('#{$color}', 2, -1);
  }
}

// Test value of bg $color and return light or dark text color accordingly
@function vf-contrast-text-color($color) {
  @if (lightness($color) > 55) {
    @return $color-x-dark; // Lighter background, return dark color
  } @else {
    @return $color-x-light; // Darker background, return light color
  }
}

@mixin vf-external-link-color($color-link: $color-link, $color-icon: currentColor) {
  .p-link--external {
    color: $color-link;

    &::after {
      background-color: $color-icon;
    }
  }
}

// Returns the font color to be presented on the passed background-color
// variable.
@function vf-determine-text-color($background-color) {
  @if (lightness($background-color) > 50) {
    @return $color-dark;
  } @else {
    @return $color-x-light;
  }
}

// Adds visiual focus to elements on :focus
@mixin vf-focus($color: $color-focus, $width: 2px) {
  &:focus {
    outline: $width solid $color;
  }
}

// Raises a number to a power (https://css-tricks.com/snippets/sass/power-function/)
@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: $value / $number;
    }
  }

  @return $value;
}

@mixin vf-highlight-bar($bg-color: $color-mid-dark, $position: top, $over-border: false) {
  position: relative;

  &::before {
    #{$position}: 0;
    background-color: $bg-color;
    content: '';
    position: absolute;
  }

  @if $position == top or $position == bottom {
    &::before {
      height: $bar-thickness;
      width: auto;

      @if $over-border == true {
        left: -1px;
        right: -1px;
        z-index: 1;
      } @else {
        left: 0;
        right: 0;
      }
    }
  } @else if $position == left or $position == right {
    &::before {
      height: auto;
      width: $bar-thickness;

      @if $over-border == true {
        bottom: -1px;
        top: -1px;
        z-index: 1;
      } @else {
        bottom: 0;
        top: 0;
      }
    }
  }
}
