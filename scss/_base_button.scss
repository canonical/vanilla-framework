@import 'settings';

// Base button styles
@mixin vf-b-button {
  // stylelint-disable selector-max-type -- base styles can use type selectors
  button {
    @extend %vf-button-base;
    @include vf-button-pattern;
  }

  %vf-button-base {
    @include vf-animation(#{background-color, border-color}, fast, in);
    @include vf-focus;

    border-radius: $border-radius;
    border-style: solid;
    border-width: 1px;
    cursor: pointer;
    display: inline-block;
    font-size: 1rem;
    font-weight: $font-weight-regular-text;
    justify-content: center;
    line-height: map-get($line-heights, default-text);
    margin: 0 0 $input-margin-bottom 0;
    padding: calc(#{$spv-nudge} - 1px) $sph-inner;
    text-align: center;
    text-decoration: none;
    width: 100%;

    &:active,
    &:focus,
    &:hover {
      text-decoration: none;
    }

    &:disabled,
    &.is-disabled {
      cursor: not-allowed;
      opacity: $disabled-element-opacity;
    }

    @media (min-width: $breakpoint-x-small) {
      margin-right: $sph-outer;
      width: auto;

      &:last-child {
        margin-right: 0;
      }
    }

    &.is-dense {
      margin-bottom: $spv-nudge-compensation;
      padding-bottom: calc(#{$spv-nudge - $sp-unit * 0.5} - 1px);
      padding-top: calc(#{$spv-nudge - $sp-unit * 0.5} - 1px);
    }

    &.is-small {
      font-size: #{map-get($font-sizes, small)}rem;
      line-height: map-get($line-heights, small);
      margin-bottom: $input-margin-bottom - $sp-unit;
      padding: calc(#{map-get($nudges, nudge--small)} - 1px) $sph-inner--small;
    }

    &.is-small.is-dense {
      margin-bottom: $spv-nudge-compensation;
      padding-bottom: calc(#{$spv-nudge - $sp-unit * 0.5} - 1px);
      padding-top: calc(#{$spv-nudge - $sp-unit * 0.5} - 1px);
    }

    // The following rules address buttons nested in <p>'s;
    p & {
      margin-bottom: $spv-outer--small-scaleable - $spv-nudge;
      margin-top: -#{$spv-nudge};
    }

    p + p > & {
      margin-top: $spv-outer--small - $spv-nudge;
    }

    @media (max-width: $breakpoint-x-small - 1) {
      p & + & {
        margin-top: $spv-outer--small + $spv-nudge-compensation;
      }
    }
    // stylelint-enable selector-max-type
  }

  %vf-button-white-success-icon {
    & .p-icon--success {
      @include vf-icon-success($color-x-light, $color-transparent);
    }
  }
}

/// mixin for all the buttons
/// there are sensible defaults, but you can
/// override colors as desired
@mixin vf-button-pattern(
  $button-background-color: $color-x-light,
  $button-text-color: $color-dark,
  $button-disabled-background-color: $color-transparent,
  $button-disabled-border-color: $colors--light-theme--border-high-contrast,
  $button-border-color: $colors--light-theme--border-high-contrast,
  $button-hover-background-color: scale-color($color-x-light, $lightness: -$hover-background-opacity-amount * 100%),
  $button-hover-border-color: $colors--light-theme--border-high-contrast,
  $button-active-background-color: scale-color($color-x-light, $lightness: -$active-background-opacity-amount * 100%),
  $button-active-border-color: $colors--light-theme--border-high-contrast
) {
  background-color: $button-background-color;
  border-color: $button-border-color;
  color: $button-text-color;

  &:visited {
    color: $button-text-color;
  }

  &:hover {
    background-color: $button-hover-background-color;
    border-color: $button-hover-border-color;
  }

  &:active,
  &[aria-pressed='true'],
  &[aria-expanded='true'] {
    background-color: $button-active-background-color;
    border-color: $button-active-border-color;
    transition-duration: 0s;
  }

  &:disabled,
  &.is-disabled {
    &:active,
    &[aria-pressed='true'],
    &[aria-expanded='true'],
    &:hover {
      background-color: $button-disabled-background-color;
      border-color: $button-disabled-border-color;
    }
  }

  .p-link--external {
    color: currentColor;
  }
}
