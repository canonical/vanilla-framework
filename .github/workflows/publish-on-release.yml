name: Publish Vanilla release

on:
  release:
    types: [published]

jobs:
  build-css:
    name: Build Vanilla CSS
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Read Vanilla version from package.json
        run: |
          node -p "require('./package.json').version" > VANILLA_VERSION
          echo "Building Vanilla CSS v$(cat VANILLA_VERSION)"
      - run: yarn install
      - run: yarn build
      - run: yarn test
      - name: Show size of the build file
        run: stat -c '%s' build/css/build.css
      - run: cp VANILLA_VERSION build/css
      - uses: actions/upload-artifact@v4
        with:
          name: css
          path: build/css

  build-js:
    name: Build Vanilla JS
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Read Vanilla version from package.json
        run: |
          node -p "require('./package.json').version" > VANILLA_VERSION
          echo "Building Vanilla JS v$(cat VANILLA_VERSION)"
      - name: Install esbuild and dependencies
        run: npm install esbuild
      - name: Create esbuild configuration file
        # This step creates a script to execute your specific esbuild configuration
        run: |
          echo 'require("esbuild").build({
            entryPoints: ["templates/static/js/index.js"],
            bundle: true,
            outfile: "build/js/vanilla.bundle.mjs",
            format: "esm",
            sourcemap: true,
            minify: true,
            tsconfigRaw: {},
          });' > esbuild-config.js
      - name: Run esbuild to generate ESM bundle
        run: node esbuild-config.js
      - name: Show size of the build file
        run: stat -c '%s' build/js/vanilla.bundle.mjs
      - run: cp VANILLA_VERSION build/js
      - uses: actions/upload-artifact@v4
        with:
          name: js
          path: build/js/vanilla.bundle.mjs
  build:
    name: Build Vanilla CSS and JS
    runs-on: ubuntu-latest
    needs: [build-css, build-js]

  publish-npm:
    name: Publish to NPM
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 12
          registry-url: https://registry.npmjs.org/
      - if: ${{ !github.event.release.prerelease }}
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - if: ${{ github.event.release.prerelease }}
        run: npm publish --tag next
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  publish-assets:
    name: Publish to assets server
    if: ${{ !github.event.release.prerelease }}
    needs: [build, publish-npm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: css
          path: css
      - name: Install upload-assets snap
        run: sudo snap install upload-assets
      - name: Upload assets to assets server
        run: |
          upload-assets --url-path vanilla-framework-version-$(cat css/VANILLA_VERSION).min.css css/build.css
          upload-assets --url-path vanilla-framework-version-$(cat js/VANILLA_VERSION).min.mjs build/js/vanilla.bundle.mjs
        env:
          UPLOAD_ASSETS_API_TOKEN: ${{secrets.UPLOAD_ASSETS_API_TOKEN}}

  notify-figma:
    name: Notify Figma library maintainers
    needs: publish-npm
    runs-on: ubuntu-latest
    steps:
      - name: Notify Figma library maintainers
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{ "source": "Vanilla CSS", "change-summary": " [Vanilla release notes](${{ github.event.release.html_url }})" }' ${{ secrets.FIGMA_LIBRARY_ALERT_URL }}
